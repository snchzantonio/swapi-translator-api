service: candidate

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource:
            - Fn::GetAtt: [ ThingsDynamoDbTable, Arn ] 

package:
  patterns:
    - '!__test__/**'
    - '!layers/**'
    - '!node_modules/**'
    - '!dev-candidate-dev-swagger.json'
    - '!dev-candidate-dev-swagger.yaml'
    - '!package.json'
    - '!package-lock.json'
    
functions:
  translatorswapi:
    handler: translate_swapi/index.translator
    description: Recibe el nombre de un recurso de la api de SWAPI y devuelve su contenido traduciendo sus propiedades al espa√±ol
    layers:
      - { Ref: GotLambdaLayer }
    events:
      - http: 
          path: vehiculos
          method: get
          cors: true
      - http: 
          path: vehiculos/{idVehiculo}
          method: get
          cors: true
      - http: 
          path: peliculas
          method: get
          cors: true
      - http: 
          path: peliculas/{idPelicula}
          method: get
          cors: true
      - http: 
          path: personajes
          method: get
          cors: true
      - http: 
          path: personajes/{idPersonajs}
          method: get
          cors: true
      - http: 
          path: planetas
          method: get
          cors: true
      - http: 
          path: planetas/{idPlaneta}
          method: get
          cors: true
      - http: 
          path: especies
          method: get
          cors: true
      - http: 
          path: especies/{idEspecie}
          method: get
          cors: true
      - http: 
          path: naves
          method: get
          cors: true
      - http: 
          path: naves/{idNave}
          method: get
          cors: true
      - http: 
          path: vehiculos
          method: get
          cors: true
      - http: 
          path: vehiculos/{idVehiculo}
          method: get
          cors: true

  dynamoCreate:
    handler: things/create.handler
    layers:
      - { Ref: AwssdkLambdaLayer }
    events:
      - http:
          path: things
          method: post
          cors: true

  dynamoList:
    handler: things/list.handler
    layers:
      - { Ref: AwssdkLambdaLayer }
    events:
      - http:
          path: things
          method: get
          cors: true

resources:
  Resources:
    ThingsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: things

layers:
  got:
    package:
      artifact: layers/got.zip
      patterns:
        - 'layers/got.zip'
  awssdk:
    package:
      artifact: layers/awssdk.zip
      patterns:
        - 'layers/awssdk.zip'